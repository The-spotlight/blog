import projectConfig from '/blog/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: 'master' },
    'pagePath': "posts/Maintaining Separation of Concerns Through Angular Directives.md",
    'layoutPath': "posts/_layout.tsx",
    'outputPath': "posts/Maintaining Separation of Concerns Through Angular Directives.html",
    'title': "Maintaining Separation of Concerns Through Angular Directives",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Maintaining Separation of Concerns Through Angular Directives</h1>\n<p><img src="https://miro.medium.com/max/1400/1*z72M1pr8-q5k2QJ4SaUR8g.png" alt="img"></p>\n<p>We have a date picker component in our application. We send an event each time a user changes the date to our analytics provider. We have one use of it so far, so the analytics code was inside the component that uses it:</p>\n<pre class="language-autoit"><code class="language-autoit">import { UntilDestroy<span class="token punctuation">,</span> untilDestroyed } from <span class="token string">\'@ngneat/until-destroyed\'</span><span class="token comment">;</span>\n\n@<span class="token function">UntilDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nclass FooComponent {\n  timespanControl <span class="token operator">=</span> new <span class="token function">FormControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n\n  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    this<span class="token punctuation">.</span>timespanControl<span class="token punctuation">.</span>valueChanges\n      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">untilDestroyed</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>{ preset }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        this<span class="token punctuation">.</span>analyticsService<span class="token punctuation">.</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token string">\'timespan-filter apply\'</span><span class="token punctuation">,</span> {\n          value<span class="token punctuation">:</span> preset<span class="token punctuation">,</span>\n        }<span class="token punctuation">)</span><span class="token comment">;</span>\n      }<span class="token punctuation">)</span><span class="token comment">;</span>\n  }\n}\n</code></pre>\n<p>However, now we have more places where we must use this code, and we don’t want to duplicate it everywhere. One might think that the logic could be incorporated into the date picker component and passed as input:</p>\n<pre class="language-autoit"><code class="language-autoit">class DatePickerComponent {\n  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> analyticsContext<span class="token punctuation">:</span> string<span class="token comment">;</span>\n   \n  <span class="token function">constructor</span><span class="token punctuation">(</span>private analyticsService<span class="token punctuation">:</span> AnalyticsService<span class="token punctuation">)</span> {}\n\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    this<span class="token punctuation">.</span>analyticsService<span class="token punctuation">.</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token string">\'timespan-filter apply\'</span><span class="token punctuation">,</span> {\n      context<span class="token punctuation">:</span> this<span class="token punctuation">.</span>analyticsContext<span class="token punctuation">,</span>\n      value<span class="token punctuation">:</span> this<span class="token punctuation">.</span>preset<span class="token punctuation">,</span>\n    }<span class="token punctuation">)</span><span class="token comment">;</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  }\n}\n</code></pre>\n<p>Indeed, that would work, but it’s not the ideal design. <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">Separation of concerns</a> means that the date picker component isn’t concerned with the analytics and doesn’t need to know anything about it.</p>\n<p>Furthermore, in this case, we have control over the source code since it’s an internal component, but what if it was a third-party component?</p>\n<p>A better option here would be to use Angular directives. Let’s create a directive that obtains a reference to the form control via DI, subscribes to value changes, and fires the analytics event:</p>\n<pre class="language-autoit"><code class="language-autoit">\n@<span class="token function">UntilDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n@<span class="token function">Directive</span><span class="token punctuation">(</span>{\n  selector<span class="token punctuation">:</span> <span class="token string">\'[datePickerAnalytics]\'</span><span class="token punctuation">,</span>\n}<span class="token punctuation">)</span>\nexport class DatePickerAnalyticsDirective implements OnInit {\n  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'datePickerAnalytics\'</span><span class="token punctuation">)</span> analyticsContext<span class="token punctuation">:</span> string<span class="token comment">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>\n    private dateFormControl<span class="token punctuation">:</span> NgControl<span class="token punctuation">,</span>\n    private analyticsService<span class="token punctuation">:</span> AnalyticsService\n  <span class="token punctuation">)</span> {}\n\n  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    this<span class="token punctuation">.</span>dateFormControl\n      <span class="token punctuation">.</span>control<span class="token punctuation">.</span>valueChanges<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">untilDestroyed</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>{ preset }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        this<span class="token punctuation">.</span>analyticsService<span class="token punctuation">.</span><span class="token function">track</span><span class="token punctuation">(</span>\n          <span class="token string">\'timespan-filter apply\'</span><span class="token punctuation">,</span>\n          {\n            value<span class="token punctuation">:</span> preset<span class="token punctuation">,</span>\n            context<span class="token punctuation">:</span> this<span class="token punctuation">.</span>analyticsContext\n          }\n        <span class="token punctuation">)</span><span class="token comment">;</span>\n      }<span class="token punctuation">)</span><span class="token comment">;</span>\n  }\n}\n</code></pre>\n<p>We can now use it every time we use the date picker:</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">&lt;</span>date<span class="token operator">-</span>picker <span class="token punctuation">[</span>formControl<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"control"</span> datePickerAnalytics<span class="token operator">=</span><span class="token string">"fooPage"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>date<span class="token operator">-</span>picker<span class="token operator">></span>\n</code></pre>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/blog/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "Maintaining Separation of Concerns Through Angular Directives"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p><img src="https://miro.medium.com/max/1400/1*z72M1pr8-q5k2QJ4SaUR8g.png" alt="img"></p>\n<p>We have a date picker component in our application. We send an event each time a user changes the date to our analytics provider. We have one use of it so far, so the analytics code was inside the component that uses it:</p>\n<pre class="language-autoit"><code class="language-autoit">import { UntilDestroy<span class="token punctuation">,</span> untilDestroyed } from <span class="token string">\'@ngneat/until-destroyed\'</span><span class="token comment">;</span>\n\n@<span class="token function">UntilDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nclass FooComponent {\n  timespanControl <span class="token operator">=</span> new <span class="token function">FormControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">;</span>\n\n  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    this<span class="token punctuation">.</span>timespanControl<span class="token punctuation">.</span>valueChanges\n      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">untilDestroyed</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>{ preset }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        this<span class="token punctuation">.</span>analyticsService<span class="token punctuation">.</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token string">\'timespan-filter apply\'</span><span class="token punctuation">,</span> {\n          value<span class="token punctuation">:</span> preset<span class="token punctuation">,</span>\n        }<span class="token punctuation">)</span><span class="token comment">;</span>\n      }<span class="token punctuation">)</span><span class="token comment">;</span>\n  }\n}\n</code></pre>\n<p>However, now we have more places where we must use this code, and we don’t want to duplicate it everywhere. One might think that the logic could be incorporated into the date picker component and passed as input:</p>\n<pre class="language-autoit"><code class="language-autoit">class DatePickerComponent {\n  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> analyticsContext<span class="token punctuation">:</span> string<span class="token comment">;</span>\n   \n  <span class="token function">constructor</span><span class="token punctuation">(</span>private analyticsService<span class="token punctuation">:</span> AnalyticsService<span class="token punctuation">)</span> {}\n\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    this<span class="token punctuation">.</span>analyticsService<span class="token punctuation">.</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token string">\'timespan-filter apply\'</span><span class="token punctuation">,</span> {\n      context<span class="token punctuation">:</span> this<span class="token punctuation">.</span>analyticsContext<span class="token punctuation">,</span>\n      value<span class="token punctuation">:</span> this<span class="token punctuation">.</span>preset<span class="token punctuation">,</span>\n    }<span class="token punctuation">)</span><span class="token comment">;</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  }\n}\n</code></pre>\n<p>Indeed, that would work, but it’s not the ideal design. <a href="https://en.wikipedia.org/wiki/Separation_of_concerns">Separation of concerns</a> means that the date picker component isn’t concerned with the analytics and doesn’t need to know anything about it.</p>\n<p>Furthermore, in this case, we have control over the source code since it’s an internal component, but what if it was a third-party component?</p>\n<p>A better option here would be to use Angular directives. Let’s create a directive that obtains a reference to the form control via DI, subscribes to value changes, and fires the analytics event:</p>\n<pre class="language-autoit"><code class="language-autoit">\n@<span class="token function">UntilDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n@<span class="token function">Directive</span><span class="token punctuation">(</span>{\n  selector<span class="token punctuation">:</span> <span class="token string">\'[datePickerAnalytics]\'</span><span class="token punctuation">,</span>\n}<span class="token punctuation">)</span>\nexport class DatePickerAnalyticsDirective implements OnInit {\n  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token string">\'datePickerAnalytics\'</span><span class="token punctuation">)</span> analyticsContext<span class="token punctuation">:</span> string<span class="token comment">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span>\n    private dateFormControl<span class="token punctuation">:</span> NgControl<span class="token punctuation">,</span>\n    private analyticsService<span class="token punctuation">:</span> AnalyticsService\n  <span class="token punctuation">)</span> {}\n\n  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    this<span class="token punctuation">.</span>dateFormControl\n      <span class="token punctuation">.</span>control<span class="token punctuation">.</span>valueChanges<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">untilDestroyed</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>{ preset }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n        this<span class="token punctuation">.</span>analyticsService<span class="token punctuation">.</span><span class="token function">track</span><span class="token punctuation">(</span>\n          <span class="token string">\'timespan-filter apply\'</span><span class="token punctuation">,</span>\n          {\n            value<span class="token punctuation">:</span> preset<span class="token punctuation">,</span>\n            context<span class="token punctuation">:</span> this<span class="token punctuation">.</span>analyticsContext\n          }\n        <span class="token punctuation">)</span><span class="token comment">;</span>\n      }<span class="token punctuation">)</span><span class="token comment">;</span>\n  }\n}\n</code></pre>\n<p>We can now use it every time we use the date picker:</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">&lt;</span>date<span class="token operator">-</span>picker <span class="token punctuation">[</span>formControl<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"control"</span> datePickerAnalytics<span class="token operator">=</span><span class="token string">"fooPage"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>date<span class="token operator">-</span>picker<span class="token operator">></span>\n</code></pre>'
        } }),
    'toc': null,
    'author': "Augus",
    'contributors': [
        "Augus"
    ],
    'date': "2021-09-13T02:33:52.000Z",
    'updated': null,
    'excerpt': "We have a date picker component in our application. We send an event each time a user changes the date to our analytics provider. We have one use of it so far, so the analytics code was inside the component tha...",
    'cover': "https://miro.medium.com/max/1400/1*z72M1pr8-q5k2QJ4SaUR8g.png",
    'blog': {
        "isPost": true,
        "posts": [
            {
                "pagePath": "posts/Maintaining Separation of Concerns Through Angular Directives.md",
                "title": "Maintaining Separation of Concerns Through Angular Directives",
                "link": "posts/Maintaining Separation of Concerns Through Angular Directives.html",
                "date": "2021-09-13T02:33:52.000Z",
                "updated": null,
                "author": "Augus",
                "contributors": [
                    "Augus"
                ],
                "excerpt": "We have a date picker component in our application. We send an event each time a user changes the date to our analytics provider. We have one use of it so far, so the analytics code was inside the component tha...",
                "cover": "https://miro.medium.com/max/1400/1*z72M1pr8-q5k2QJ4SaUR8g.png"
            },
            {
                "pagePath": "posts/ideaVim.md",
                "title": "ideaVim",
                "link": "posts/ideaVim.html",
                "date": "2021-05-16T00:00:00.000Z",
                "updated": null,
                "author": "Augus",
                "contributors": [
                    "Augus"
                ],
                "categories": [
                    "webstorm plugin"
                ],
                "tags": [
                    "plugin"
                ],
                "excerpt": "源起 平常总喜欢喜欢看一些idea插件， 尤其是看到一些热门的插件，总是想去尝试。 ideaVim就是我最喜欢的插件之一, 它可以很好的提高你的代码效率， vim语法可以通过键盘完成大部分操作，摆脱鼠标和键盘之间来回切换的桎梏。 v...",
                "cover": "../assets/ideaVim/vim_chart.png"
            }
        ],
        "categories": [
            {
                "name": "webstorm plugin",
                "count": 1
            }
        ],
        "tags": [
            {
                "name": "plugin",
                "count": 1
            }
        ]
    }
};
